/*
 * Tatum API Reference
 *
 * # Welcome to the Tatum API Reference!  ## What is Tatum?  Tatum offers a flexible framework to build, run, and scale blockchain apps fast. To learn more about the Tatum blockchain development framework, visit [our website](https://tatum.io/framework).  The Tatum API features powerful endpoints that simplify a complex blockchain into single API requests. Code for all supported blockchains using unified API calls.  ## Need help?  To chat with other developers, get help from the Support team, and engage with the thriving Tatum community, join  our [Discord server](https://discord.com/invite/tatum). For more information about how to work with Tatum, review the [online documentation](https://docs.tatum.io/).  ## About this API Reference  The Tatum API Reference is based on OpenAPI Specification v3.1.0 with a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md) applied.  # Authentication  When using the Tatum API, you authenticate yourself with an **API key**. <SecurityDefinitions /> 
 *
 * The version of the OpenAPI document: 3.15.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Tatum.CSharp.Core.Client.FileParameter;
using OpenAPIDateConverter = Tatum.CSharp.Core.Client.OpenAPIDateConverter;

namespace Tatum.CSharp.Core.Model
{
    /// <summary>
    /// Error400Data
    /// </summary>
    [DataContract(Name = "Error400_data")]
    public partial class Error400Data : IEquatable<Error400Data>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Error400Data" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Error400Data() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Error400Data" /> class.
        /// </summary>
        /// <param name="target">Request object present in the body of the HTTP request (required).</param>
        /// <param name="value">Value of the target object which validation is wrong. Can be of any data type, example here is using type number..</param>
        /// <param name="property">Property name of the target object which validation is wrong.</param>
        /// <param name="constraints">Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint..</param>
        public Error400Data(Dictionary<string, Object> target = default(Dictionary<string, Object>), decimal value = default(decimal), string property = default(string), Dictionary<string, Object> constraints = default(Dictionary<string, Object>))
        {
            // to ensure "target" is required (not null)
            if (target == null) {
                throw new ArgumentNullException("target is a required property for Error400Data and cannot be null");
            }
            this.Target = target;
            this.Value = value;
            this.Property = property;
            this.Constraints = constraints;
        }

        /// <summary>
        /// Request object present in the body of the HTTP request
        /// </summary>
        /// <value>Request object present in the body of the HTTP request</value>
        [DataMember(Name = "target", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, Object> Target { get; set; }

        /// <summary>
        /// Value of the target object which validation is wrong. Can be of any data type, example here is using type number.
        /// </summary>
        /// <value>Value of the target object which validation is wrong. Can be of any data type, example here is using type number.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public decimal Value { get; set; }

        /// <summary>
        /// Property name of the target object which validation is wrong
        /// </summary>
        /// <value>Property name of the target object which validation is wrong</value>
        [DataMember(Name = "property", EmitDefaultValue = false)]
        public string Property { get; set; }

        /// <summary>
        /// Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.
        /// </summary>
        /// <value>Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.</value>
        [DataMember(Name = "constraints", EmitDefaultValue = false)]
        public Dictionary<string, Object> Constraints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Error400Data {\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Property: ").Append(Property).Append("\n");
            sb.Append("  Constraints: ").Append(Constraints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Error400Data);
        }

        /// <summary>
        /// Returns true if Error400Data instances are equal
        /// </summary>
        /// <param name="input">Instance of Error400Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Error400Data input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Target == input.Target ||
                    this.Target != null &&
                    input.Target != null &&
                    this.Target.SequenceEqual(input.Target)
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                ) && 
                (
                    this.Property == input.Property ||
                    (this.Property != null &&
                    this.Property.Equals(input.Property))
                ) && 
                (
                    this.Constraints == input.Constraints ||
                    this.Constraints != null &&
                    input.Constraints != null &&
                    this.Constraints.SequenceEqual(input.Constraints)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Target != null)
                {
                    hashCode = (hashCode * 59) + this.Target.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Value.GetHashCode();
                if (this.Property != null)
                {
                    hashCode = (hashCode * 59) + this.Property.GetHashCode();
                }
                if (this.Constraints != null)
                {
                    hashCode = (hashCode * 59) + this.Constraints.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
